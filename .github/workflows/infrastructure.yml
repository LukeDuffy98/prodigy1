name: Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - validate

env:
  AZURE_LOCATION: eastus

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      resource-group: ${{ steps.env.outputs.resource-group }}
      frontend-app: ${{ steps.env.outputs.frontend-app }}
      backend-app: ${{ steps.env.outputs.backend-app }}
      parameters-file: ${{ steps.env.outputs.parameters-file }}
      app-service-sku: ${{ steps.env.outputs.app-service-sku }}
    steps:
    - name: Set environment variables
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          echo "resource-group=rg-prodigy1-prod" >> $GITHUB_OUTPUT
          echo "frontend-app=prodigy1-prod-webapp" >> $GITHUB_OUTPUT
          echo "backend-app=prodigy1-prod-funcapp" >> $GITHUB_OUTPUT
          echo "parameters-file=parameters.prod.json" >> $GITHUB_OUTPUT
          echo "app-service-sku=S1" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
          echo "resource-group=rg-prodigy1-staging" >> $GITHUB_OUTPUT
          echo "frontend-app=prodigy1-staging-webapp" >> $GITHUB_OUTPUT
          echo "backend-app=prodigy1-staging-funcapp" >> $GITHUB_OUTPUT
          echo "parameters-file=parameters.dev.json" >> $GITHUB_OUTPUT
          echo "app-service-sku=B1" >> $GITHUB_OUTPUT
        else
          echo "resource-group=rg-prodigy1-dev" >> $GITHUB_OUTPUT
          echo "frontend-app=prodigy1-dev-webapp" >> $GITHUB_OUTPUT
          echo "backend-app=prodigy1-dev-funcapp" >> $GITHUB_OUTPUT
          echo "parameters-file=parameters.dev.json" >> $GITHUB_OUTPUT
          echo "app-service-sku=F1" >> $GITHUB_OUTPUT
        fi

  validate-infrastructure:
    runs-on: ubuntu-latest
    needs: set-environment
    if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'validate'
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Verify Azure Connection
      run: |
        echo "Verifying Azure connection..."
        az account show --output table
        echo "Current subscription: $(az account show --query 'name' -o tsv)"

    - name: Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep

    - name: Validate Bicep template
      run: |
        echo "üîç Validating Bicep template for ${{ github.event.inputs.environment }} environment..."
        
        # Test Bicep compilation
        bicep build infrastructure/bicep/main.bicep --outfile /tmp/main.json
        echo "‚úÖ Bicep template compiled successfully"
        
        # Test CORS config template too
        bicep build infrastructure/bicep/cors-config.bicep --outfile /tmp/cors-config.json
        echo "‚úÖ CORS config template compiled successfully"
        
        # Show the compiled template size and basic info
        echo "üìä Template information:"
        echo "Main template size: $(wc -c < /tmp/main.json) bytes"
        echo "CORS template size: $(wc -c < /tmp/cors-config.json) bytes"
        
        # Create resource group for validation only if we're doing a full deploy
        if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
          echo "Ensuring resource group exists for deployment..."
          az group create \
            --name ${{ needs.set-environment.outputs.resource-group }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=${{ github.event.inputs.environment }} Project=Prodigy1 \
            --output none \
            || echo "Resource group creation failed or already exists - continuing..."
        fi
        
        echo "‚úÖ Template validation completed successfully"

    - name: Estimate costs
      run: |
        echo "üí∞ Estimating costs for ${{ github.event.inputs.environment }} environment..."
        echo "Resource Group: ${{ needs.set-environment.outputs.resource-group }}"
        echo "App Service SKU: ${{ needs.set-environment.outputs.app-service-sku }}"
        echo "Environment: ${{ github.event.inputs.environment }}"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [set-environment, validate-infrastructure]
    if: github.event.inputs.action == 'deploy'
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        echo "üèóÔ∏è Creating resource group: ${{ needs.set-environment.outputs.resource-group }}"
        az group create \
          --name ${{ needs.set-environment.outputs.resource-group }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags Environment=${{ github.event.inputs.environment }} Project=Prodigy1

    - name: Deploy Infrastructure
      id: deploy
      run: |
        chmod +x ./fix-deployment.sh
        # Update script with current values
        sed -i "s/rg-prodigy1-dev/${{ needs.set-environment.outputs.resource-group }}/g" ./fix-deployment.sh
        sed -i "s/prodigy1-dev-webapp/${{ needs.set-environment.outputs.frontend-app }}/g" ./fix-deployment.sh
        sed -i "s/prodigy1-dev-funcapp/${{ needs.set-environment.outputs.backend-app }}/g" ./fix-deployment.sh
        sed -i "s/parameters.dev.json/${{ needs.set-environment.outputs.parameters-file }}/g" ./fix-deployment.sh
        ./fix-deployment.sh

    - name: Configure CORS and Cross-App Settings
      run: |
        echo "‚öôÔ∏è Configuring CORS and cross-app settings..."
        
        # Wait a moment for the main deployment to fully complete
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Configure CORS manually to avoid the template deployment issue
        echo "Setting up CORS for Function App..."
        
        if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          ALLOWED_ORIGINS="https://${{ needs.set-environment.outputs.frontend-app }}.azurewebsites.net"
        else
          ALLOWED_ORIGINS="https://${{ needs.set-environment.outputs.frontend-app }}.azurewebsites.net http://localhost:3000"
        fi
        
        # Configure CORS using Azure CLI
        az functionapp cors add \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --allowed-origins $ALLOWED_ORIGINS \
          || echo "‚ö†Ô∏è CORS configuration had issues - will configure later"
        
        echo "‚úÖ CORS configuration completed"

    - name: Configure App Service Settings
      run: |
        echo "‚öôÔ∏è Configuring application settings..."
        
        # Get Function App URL
        FUNC_URL=$(az functionapp show \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'defaultHostName' \
          --output tsv)
        
        echo "Function App URL: https://$FUNC_URL"
        
        # Configure Web App settings
        az webapp config appsettings set \
          --name ${{ needs.set-environment.outputs.frontend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --settings \
          NEXT_PUBLIC_API_BASE_URL=https://$FUNC_URL/api \
          NEXT_PUBLIC_ENVIRONMENT=${{ github.event.inputs.environment }} \
          NEXT_PUBLIC_APP_NAME=Prodigy1 \
          || echo "‚ö†Ô∏è App settings configuration had issues"
        
        echo "‚úÖ App settings configured"

    - name: Deployment Summary
      run: |
        echo "üìã Deployment Summary"
        echo "===================="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Resource Group: ${{ needs.set-environment.outputs.resource-group }}"
        echo "Frontend App: ${{ needs.set-environment.outputs.frontend-app }}"
        echo "Backend App: ${{ needs.set-environment.outputs.backend-app }}"
        echo ""
        echo "üåê Application URLs:"
        echo "Frontend: https://${{ needs.set-environment.outputs.frontend-app }}.azurewebsites.net"
        echo "Backend: https://${{ needs.set-environment.outputs.backend-app }}.azurewebsites.net"
        echo ""
        echo "‚úÖ Infrastructure deployment completed successfully!"
        echo ""
        echo "üöÄ Next steps:"
        echo "1. Deploy your application code using the 'Azure Deploy' workflow"
        echo "2. Test the applications using the provided URLs"
        echo "3. Monitor the deployment in the Azure portal"

  destroy-infrastructure:
    runs-on: ubuntu-latest
    needs: set-environment
    if: github.event.inputs.action == 'destroy'
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Destroy Infrastructure
      run: |
        echo "üóëÔ∏è Destroying infrastructure for ${{ github.event.inputs.environment }} environment..."
        echo "Resource Group: ${{ needs.set-environment.outputs.resource-group }}"
        
        # Check if resource group exists
        if az group show --name ${{ needs.set-environment.outputs.resource-group }} >/dev/null 2>&1; then
          echo "Deleting resource group and all resources..."
          az group delete \
            --name ${{ needs.set-environment.outputs.resource-group }} \
            --yes \
            --no-wait
          echo "‚úÖ Resource group deletion initiated"
        else
          echo "‚ÑπÔ∏è Resource group does not exist"
        fi

  health-check:
    runs-on: ubuntu-latest
    needs: [set-environment, deploy-infrastructure]
    if: github.event.inputs.action == 'deploy'
    steps:
    - name: Health Check
      run: |
        echo "üè• Performing health checks..."
        
        # Wait for apps to be fully started
        sleep 60
        
        # Check Frontend
        FRONTEND_URL="https://${{ needs.set-environment.outputs.frontend-app }}.azurewebsites.net"
        echo "Checking frontend: $FRONTEND_URL"
        
        if curl -f -s "$FRONTEND_URL" > /dev/null; then
          echo "‚úÖ Frontend is responding"
        else
          echo "‚ö†Ô∏è Frontend may not be ready yet"
        fi
        
        # Check Backend
        BACKEND_URL="https://${{ needs.set-environment.outputs.backend-app }}.azurewebsites.net/api/health"
        echo "Checking backend: $BACKEND_URL"
        
        if curl -f -s "$BACKEND_URL" > /dev/null; then
          echo "‚úÖ Backend is responding"
        else
          echo "‚ö†Ô∏è Backend may not be ready yet"
        fi
        
        echo "üéâ Health check completed!"
