name: Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - validate
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force:
        description: 'Force action (use with caution)'
        required: false
        default: false
        type: boolean

env:
  AZURE_LOCATION: eastus
  
jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      resource-group: ${{ steps.set-vars.outputs.resource-group }}
      frontend-app: ${{ steps.set-vars.outputs.frontend-app }}
      backend-app: ${{ steps.set-vars.outputs.backend-app }}
      parameters-file: ${{ steps.set-vars.outputs.parameters-file }}
      app-service-sku: ${{ steps.set-vars.outputs.app-service-sku }}
      
    steps:
    - name: Set environment variables
      id: set-vars
      run: |
        if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          echo "resource-group=rg-prodigy1-prod" >> $GITHUB_OUTPUT
          echo "frontend-app=prodigy1-prod-webapp" >> $GITHUB_OUTPUT
          echo "backend-app=prodigy1-prod-funcapp" >> $GITHUB_OUTPUT
          echo "parameters-file=parameters.prod.json" >> $GITHUB_OUTPUT
          echo "app-service-sku=S1" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
          echo "resource-group=rg-prodigy1-staging" >> $GITHUB_OUTPUT
          echo "frontend-app=prodigy1-staging-webapp" >> $GITHUB_OUTPUT
          echo "backend-app=prodigy1-staging-funcapp" >> $GITHUB_OUTPUT
          echo "parameters-file=parameters.dev.json" >> $GITHUB_OUTPUT
          echo "app-service-sku=B1" >> $GITHUB_OUTPUT
        else
          echo "resource-group=rg-prodigy1-dev" >> $GITHUB_OUTPUT
          echo "frontend-app=prodigy1-dev-webapp" >> $GITHUB_OUTPUT
          echo "backend-app=prodigy1-dev-funcapp" >> $GITHUB_OUTPUT
          echo "parameters-file=parameters.dev.json" >> $GITHUB_OUTPUT
          echo "app-service-sku=F1" >> $GITHUB_OUTPUT
        fi

  validate-infrastructure:
    runs-on: ubuntu-latest
    needs: set-environment
    if: github.event.inputs.action == 'validate' || github.event.inputs.action == 'deploy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Verify Azure Connection
      run: |
        echo "Verifying Azure connection..."
        az account show --output table
        echo "Current subscription: $(az account show --query 'name' -o tsv)"

    - name: Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep

    - name: Validate Bicep template
      run: |
        echo "üîç Validating Bicep template for ${{ github.event.inputs.environment }} environment..."
        
        # Test Bicep compilation
        bicep build infrastructure/bicep/main.bicep --outfile /tmp/main.json
        echo "‚úÖ Bicep template compiled successfully"
        
        # Test CORS config template too
        bicep build infrastructure/bicep/cors-config.bicep --outfile /tmp/cors-config.json
        echo "‚úÖ CORS config template compiled successfully"
        
        # Show the compiled template size and basic info
        echo "üìä Template information:"
        echo "Main template size: $(wc -c < /tmp/main.json) bytes"
        echo "CORS template size: $(wc -c < /tmp/cors-config.json) bytes"
        
        # Create resource group for validation only if we're doing a full deploy
        if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
          echo "Ensuring resource group exists for deployment..."
          az group create \
            --name ${{ needs.set-environment.outputs.resource-group }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=${{ github.event.inputs.environment }} Project=Prodigy1 \
            --output none \
            || echo "Resource group creation failed or already exists - continuing..."
        fi
        
        echo "‚úÖ Template validation completed successfully"

    - name: Estimate costs
      run: |
        echo "üí∞ Estimating costs for ${{ github.event.inputs.environment }} environment..."
        echo "Resource Group: ${{ needs.set-environment.outputs.resource-group }}"
        echo "App Service SKU: ${{ needs.set-environment.outputs.app-service-sku }}"
        echo "Environment: ${{ github.event.inputs.environment }}"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [set-environment, validate-infrastructure]
    if: github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        echo "üèóÔ∏è Creating resource group: ${{ needs.set-environment.outputs.resource-group }}"
        az group create \
          --name ${{ needs.set-environment.outputs.resource-group }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags Environment=${{ github.event.inputs.environment }} Project=Prodigy1

    - name: Deploy Infrastructure
      id: deploy
      run: |
        echo "üöÄ Deploying infrastructure to ${{ github.event.inputs.environment }}..."
        
        # Deploy without capturing full output to avoid "content consumed" error
        echo "Starting deployment..."
        az deployment group create \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --template-file infrastructure/bicep/main.bicep \
          --parameters @infrastructure/bicep/${{ needs.set-environment.outputs.parameters-file }} \
          --parameters appName=prodigy1 location=${{ env.AZURE_LOCATION }} environment=${{ github.event.inputs.environment }} \
          --verbose
        
        echo "‚úÖ Infrastructure deployment completed successfully"
        
        # Get deployment details separately
        echo "üìä Getting deployment information..."
        DEPLOYMENT_NAME=$(az deployment group list \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query '[0].name' \
          --output tsv)
        
        echo "Latest deployment: $DEPLOYMENT_NAME"

    - name: Configure CORS and Cross-App Settings
      run: |
        echo "‚öôÔ∏è Configuring CORS and cross-app settings..."
        
        # Wait a moment for the main deployment to fully complete
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Configure CORS manually to avoid the template deployment issue
        echo "Setting up CORS for Function App..."
        
        if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          ALLOWED_ORIGINS="https://${{ needs.set-environment.outputs.frontend-app }}.azurewebsites.net"
        else
          ALLOWED_ORIGINS="https://${{ needs.set-environment.outputs.frontend-app }}.azurewebsites.net http://localhost:3000"
        fi
        
        # Configure CORS using Azure CLI
        az functionapp cors add \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --allowed-origins $ALLOWED_ORIGINS \
          || echo "‚ö†Ô∏è CORS configuration had issues - will configure later"
        
        echo "‚úÖ CORS configuration completed"

    - name: Configure App Service Settings
      run: |
        echo "‚öôÔ∏è Configuring application settings..."
        
        # Get Function App URL
        FUNC_URL=$(az functionapp show \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'defaultHostName' \
          --output tsv)
        
        echo "Function App URL: https://$FUNC_URL"
        
        # Configure Web App settings
        az webapp config appsettings set \
          --name ${{ needs.set-environment.outputs.frontend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --settings \
          NEXT_PUBLIC_API_BASE_URL=https://$FUNC_URL/api \
          NEXT_PUBLIC_ENVIRONMENT=${{ github.event.inputs.environment }} \
          NEXT_PUBLIC_APP_NAME=Prodigy1 \
          || echo "‚ö†Ô∏è App settings configuration had issues"
        
        echo "‚úÖ App settings configured"

    - name: Configure App Service Settings
      run: |
        echo "‚öôÔ∏è Configuring application settings..."
        
        # Get Function App URL
        FUNC_URL=$(az functionapp show \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'defaultHostName' \
          --output tsv)
        
        # Configure Web App settings
        az webapp config appsettings set \
          --name ${{ needs.set-environment.outputs.frontend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --settings \
          NEXT_PUBLIC_API_BASE_URL=https://$FUNC_URL/api \
          NEXT_PUBLIC_ENVIRONMENT=${{ github.event.inputs.environment }} \
          NEXT_PUBLIC_APP_NAME=Prodigy1

    - name: Deployment Summary
      run: |
        echo "## üéâ Infrastructure Deployment Complete"
        echo ""
        echo "**Environment:** ${{ github.event.inputs.environment }}"
        echo "**Resource Group:** ${{ needs.set-environment.outputs.resource-group }}"
        echo "**Location:** ${{ env.AZURE_LOCATION }}"
        echo ""
        echo "**Resources Created:**"
        echo "- Frontend App: ${{ needs.set-environment.outputs.frontend-app }}"
        echo "- Backend App: ${{ needs.set-environment.outputs.backend-app }}"
        echo "- Storage Account: Configured"
        echo "- Application Insights: Configured"
        echo ""
        echo "**Next Steps:**"
        echo "1. Deploy application code using the main deployment workflow"
        echo "2. Configure any additional settings in Azure Portal"
        echo "3. Set up monitoring and alerts"

  destroy-infrastructure:
    runs-on: ubuntu-latest
    needs: set-environment
    if: github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Confirm destruction
      run: |
        if [ "${{ github.event.inputs.force }}" != "true" ]; then
          echo "‚ùå Force flag not set. Destruction cancelled for safety."
          echo "To destroy infrastructure, set the 'force' input to true."
          exit 1
        fi
        
        if [ "${{ github.event.inputs.environment }}" == "prod" ] && [ "${{ github.actor }}" != "LukeDuffy98" ]; then
          echo "‚ùå Only repository owner can destroy production environment."
          exit 1
        fi

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: List resources to be deleted
      run: |
        echo "üîç Resources in ${{ needs.set-environment.outputs.resource-group }}:"
        az resource list \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --output table

    - name: Delete Resource Group
      run: |
        echo "üóëÔ∏è Deleting resource group: ${{ needs.set-environment.outputs.resource-group }}"
        echo "This action is irreversible!"
        
        az group delete \
          --name ${{ needs.set-environment.outputs.resource-group }} \
          --yes \
          --no-wait

    - name: Destruction Summary
      run: |
        echo "## üóëÔ∏è Infrastructure Destruction Initiated"
        echo ""
        echo "**Environment:** ${{ github.event.inputs.environment }}"
        echo "**Resource Group:** ${{ needs.set-environment.outputs.resource-group }}"
        echo ""
        echo "‚ö†Ô∏è **Warning:** All resources in the resource group are being deleted."
        echo "This action cannot be undone."
        echo ""
        echo "The deletion is running in the background and may take several minutes to complete."

  # Post-deployment health check
  health-check:
    runs-on: ubuntu-latest
    needs: [set-environment, deploy-infrastructure]
    if: github.event.inputs.action == 'deploy'
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to be ready..."
        sleep 30

    - name: Check Function App Health
      run: |
        FUNC_URL=$(az functionapp show \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'defaultHostName' \
          --output tsv)
        
        echo "üîç Checking Function App health: https://$FUNC_URL"
        
        # Check if Function App is running
        status=$(az functionapp show \
          --name ${{ needs.set-environment.outputs.backend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'state' \
          --output tsv)
        
        if [ "$status" == "Running" ]; then
          echo "‚úÖ Function App is running"
        else
          echo "‚ùå Function App status: $status"
        fi

    - name: Check Web App Health
      run: |
        WEB_URL=$(az webapp show \
          --name ${{ needs.set-environment.outputs.frontend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'defaultHostName' \
          --output tsv)
        
        echo "üîç Checking Web App health: https://$WEB_URL"
        
        # Check if Web App is running
        status=$(az webapp show \
          --name ${{ needs.set-environment.outputs.frontend-app }} \
          --resource-group ${{ needs.set-environment.outputs.resource-group }} \
          --query 'state' \
          --output tsv)
        
        if [ "$status" == "Running" ]; then
          echo "‚úÖ Web App is running"
        else
          echo "‚ùå Web App status: $status"
        fi

    - name: Health Check Summary
      run: |
        echo "## üè• Health Check Complete"
        echo ""
        echo "Infrastructure has been deployed and basic health checks passed."
        echo "Services are ready for application deployment."
