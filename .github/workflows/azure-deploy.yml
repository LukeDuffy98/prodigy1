name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: rg-prodigy1-prod
  AZURE_LOCATION: eastus
  FRONTEND_APP_NAME: prodigy1-prod-webapp
  BACKEND_APP_NAME: prodigy1-prod-funcapp
  NODE_VERSION: '18.x'

jobs:
  # Infrastructure deployment
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }}

    - name: Deploy Bicep Infrastructure
      run: |
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infrastructure/bicep/main.bicep \
          --parameters @infrastructure/bicep/parameters.prod.json \
          --parameters appName=prodigy1 location=${{ env.AZURE_LOCATION }} environment=prod

    - name: Get deployment outputs
      id: deploy
      run: |
        outputs=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name main \
          --query 'properties.outputs' \
          --output json)
        echo "Infrastructure deployed successfully"
        echo "$outputs"

  # Backend deployment
  deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Azure Functions
      run: |
        cd backend
        npx azure-functions-core-tools@4 azure functionapp publish ${{ env.BACKEND_APP_NAME }} --typescript

    - name: Configure Function App Settings
      run: |
        az functionapp config appsettings set \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
          AZURE_FUNCTIONS_ENVIRONMENT=production \
          FUNCTIONS_WORKER_RUNTIME=node \
          WEBSITE_NODE_DEFAULT_VERSION=~18

  # Frontend deployment  
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm' 
        cache-dependency-path: frontend/package-lock.json

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Function App URL
      id: func-url
      run: |
        FUNC_URL=$(az functionapp show \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query 'defaultHostName' \
          --output tsv)
        echo "func_url=https://$FUNC_URL" >> $GITHUB_OUTPUT

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ steps.func-url.outputs.func_url }}/api
        NEXT_PUBLIC_ENVIRONMENT: production
        NEXT_PUBLIC_APP_NAME: Prodigy1
      run: |
        cd frontend
        npm run build

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        package: frontend

    - name: Configure Web App Settings
      run: |
        az webapp config appsettings set \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
          NEXT_PUBLIC_API_BASE_URL=${{ steps.func-url.outputs.func_url }}/api \
          NEXT_PUBLIC_ENVIRONMENT=production \
          NEXT_PUBLIC_APP_NAME=Prodigy1

  # Development environment deployment (staging)
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    env:
      DEV_RESOURCE_GROUP: rg-prodigy1-dev
      DEV_FRONTEND_APP_NAME: prodigy1-dev-webapp
      DEV_BACKEND_APP_NAME: prodigy1-dev-funcapp
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Dev Resource Group
      run: |
        az group create \
          --name ${{ env.DEV_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }}

    - name: Deploy Dev Infrastructure
      run: |
        az deployment group create \
          --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
          --template-file infrastructure/bicep/main.bicep \
          --parameters @infrastructure/bicep/parameters.dev.json \
          --parameters appName=prodigy1 location=${{ env.AZURE_LOCATION }} environment=dev

    - name: Install and build backend
      run: |
        cd backend
        npm ci
        npm run build

    - name: Deploy Dev Backend
      run: |
        cd backend
        npx azure-functions-core-tools@4 azure functionapp publish ${{ env.DEV_BACKEND_APP_NAME }} --typescript

    - name: Get Dev Function App URL
      id: dev-func-url
      run: |
        FUNC_URL=$(az functionapp show \
          --name ${{ env.DEV_BACKEND_APP_NAME }} \
          --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
          --query 'defaultHostName' \
          --output tsv)
        echo "func_url=https://$FUNC_URL" >> $GITHUB_OUTPUT

    - name: Install and build frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ steps.dev-func-url.outputs.func_url }}/api
        NEXT_PUBLIC_ENVIRONMENT: development
        NEXT_PUBLIC_APP_NAME: Prodigy1-Dev
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Deploy Dev Frontend
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.DEV_FRONTEND_APP_NAME }}
        package: frontend

    - name: Comment PR with deployment URLs
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üöÄ Deployment Complete

            **Development Environment:**
            - Frontend: https://${{ env.DEV_FRONTEND_APP_NAME }}.azurewebsites.net
            - Backend: ${{ steps.dev-func-url.outputs.func_url }}
            - API Health: ${{ steps.dev-func-url.outputs.func_url }}/api/health

            The application has been deployed to the development environment for testing.`
          })

  # Health check and smoke tests
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Function App URL
      id: func-url
      run: |
        FUNC_URL=$(az functionapp show \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query 'defaultHostName' \
          --output tsv)
        echo "func_url=https://$FUNC_URL" >> $GITHUB_OUTPUT

    - name: Get Web App URL
      id: web-url
      run: |
        WEB_URL=$(az webapp show \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query 'defaultHostName' \
          --output tsv)
        echo "web_url=https://$WEB_URL" >> $GITHUB_OUTPUT

    - name: Health Check - Backend API
      run: |
        echo "Testing backend health endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.func-url.outputs.func_url }}/api/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Backend health check passed"
        else
          echo "‚ùå Backend health check failed with status: $response"
          exit 1
        fi

    - name: Health Check - Frontend
      run: |
        echo "Testing frontend..."
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.web-url.outputs.web_url }})
        if [ $response -eq 200 ]; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ùå Frontend health check failed with status: $response"
          exit 1
        fi

    - name: Test API Integration
      run: |
        echo "Testing API integration..."
        response=$(curl -s ${{ steps.func-url.outputs.func_url }}/api/getData)
        if echo $response | grep -q "message"; then
          echo "‚úÖ API integration test passed"
          echo "Response: $response"
        else
          echo "‚ùå API integration test failed"
          echo "Response: $response"
          exit 1
        fi

    - name: Deployment Summary
      run: |
        echo "## üéâ Deployment Successful!"
        echo ""
        echo "**Production URLs:**"
        echo "- Frontend: ${{ steps.web-url.outputs.web_url }}"
        echo "- Backend: ${{ steps.func-url.outputs.func_url }}"
        echo "- API Health: ${{ steps.func-url.outputs.func_url }}/api/health"
        echo ""
        echo "**Health Checks:** ‚úÖ All Passed"
