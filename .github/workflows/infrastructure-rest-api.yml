name: Infrastructure Management (REST API)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - validate

env:
  AZURE_LOCATION: eastus

jobs:
  set-environment:
    name: 'Set Environment Variables'
    runs-on: ubuntu-latest
    outputs:
      resource-group: ${{ steps.env.outputs.resource-group }}
      frontend-app: ${{ steps.env.outputs.frontend-app }}
      backend-app: ${{ steps.env.outputs.backend-app }}
      parameters-file: ${{ steps.env.outputs.parameters-file }}
      app-service-sku: ${{ steps.env.outputs.app-service-sku }}
    steps:
      - name: Set environment variables
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "resource-group=rg-prodigy1-prod" >> $GITHUB_OUTPUT
            echo "frontend-app=prodigy1-prod-webapp" >> $GITHUB_OUTPUT
            echo "backend-app=prodigy1-prod-funcapp" >> $GITHUB_OUTPUT
            echo "parameters-file=parameters.prod.json" >> $GITHUB_OUTPUT
            echo "app-service-sku=S1" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "resource-group=rg-prodigy1-staging" >> $GITHUB_OUTPUT
            echo "frontend-app=prodigy1-staging-webapp" >> $GITHUB_OUTPUT
            echo "backend-app=prodigy1-staging-funcapp" >> $GITHUB_OUTPUT
            echo "parameters-file=parameters.dev.json" >> $GITHUB_OUTPUT
            echo "app-service-sku=B1" >> $GITHUB_OUTPUT
          else
            echo "resource-group=rg-prodigy1-dev" >> $GITHUB_OUTPUT
            echo "frontend-app=prodigy1-dev-webapp" >> $GITHUB_OUTPUT
            echo "backend-app=prodigy1-dev-funcapp" >> $GITHUB_OUTPUT
            echo "parameters-file=parameters.dev.json" >> $GITHUB_OUTPUT
            echo "app-service-sku=B1" >> $GITHUB_OUTPUT
          fi

  validate-infrastructure:
    name: 'Validate Infrastructure'
    runs-on: ubuntu-latest
    needs: set-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Validate Bicep template
        run: |
          echo "🔍 Validating Bicep template for ${{ github.event.inputs.environment }} environment..."
          
          # Test Bicep compilation
          bicep build infrastructure/bicep/main.bicep --outfile /tmp/main.json
          echo "✅ Bicep template compiled successfully"
          
          # Test CORS config template too
          bicep build infrastructure/bicep/cors-config.bicep --outfile /tmp/cors-config.json
          echo "✅ CORS config template compiled successfully"
          
          # Validate JSON structure
          jq . /tmp/main.json > /dev/null && echo "✅ Main template JSON is valid"
          jq . /tmp/cors-config.json > /dev/null && echo "✅ CORS template JSON is valid"
          
          # Show the compiled template size and basic info
          echo "📊 Template information:"
          echo "Main template size: $(wc -c < /tmp/main.json) bytes"
          echo "CORS template size: $(wc -c < /tmp/cors-config.json) bytes"
          
          echo "✅ Template validation completed successfully"

      - name: Estimate costs
        run: |
          echo "💰 Estimating costs for ${{ github.event.inputs.environment }} environment..."
          echo "Resource Group: ${{ needs.set-environment.outputs.resource-group }}"
          echo "App Service SKU: ${{ needs.set-environment.outputs.app-service-sku }}"
          echo "Environment: ${{ github.event.inputs.environment }}"

  deploy-infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: [set-environment, validate-infrastructure]
    if: github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Deploy Infrastructure via REST API
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          chmod +x ./deploy-with-rest-api.sh
          ./deploy-with-rest-api.sh
